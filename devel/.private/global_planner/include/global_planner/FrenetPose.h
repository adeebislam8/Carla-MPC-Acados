// Generated by gencpp from file global_planner/FrenetPose.msg
// DO NOT EDIT!


#ifndef GLOBAL_PLANNER_MESSAGE_FRENETPOSE_H
#define GLOBAL_PLANNER_MESSAGE_FRENETPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace global_planner
{
template <class ContainerAllocator>
struct FrenetPose_
{
  typedef FrenetPose_<ContainerAllocator> Type;

  FrenetPose_()
    : s(0.0)
    , s_dot(0.0)
    , s_ddot(0.0)
    , d(0.0)
    , d_dot(0.0)
    , d_ddot(0.0)
    , yaw_s(0.0)  {
    }
  FrenetPose_(const ContainerAllocator& _alloc)
    : s(0.0)
    , s_dot(0.0)
    , s_ddot(0.0)
    , d(0.0)
    , d_dot(0.0)
    , d_ddot(0.0)
    , yaw_s(0.0)  {
  (void)_alloc;
    }



   typedef double _s_type;
  _s_type s;

   typedef double _s_dot_type;
  _s_dot_type s_dot;

   typedef double _s_ddot_type;
  _s_ddot_type s_ddot;

   typedef double _d_type;
  _d_type d;

   typedef double _d_dot_type;
  _d_dot_type d_dot;

   typedef double _d_ddot_type;
  _d_ddot_type d_ddot;

   typedef double _yaw_s_type;
  _yaw_s_type yaw_s;





  typedef boost::shared_ptr< ::global_planner::FrenetPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_planner::FrenetPose_<ContainerAllocator> const> ConstPtr;

}; // struct FrenetPose_

typedef ::global_planner::FrenetPose_<std::allocator<void> > FrenetPose;

typedef boost::shared_ptr< ::global_planner::FrenetPose > FrenetPosePtr;
typedef boost::shared_ptr< ::global_planner::FrenetPose const> FrenetPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::global_planner::FrenetPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::global_planner::FrenetPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::global_planner::FrenetPose_<ContainerAllocator1> & lhs, const ::global_planner::FrenetPose_<ContainerAllocator2> & rhs)
{
  return lhs.s == rhs.s &&
    lhs.s_dot == rhs.s_dot &&
    lhs.s_ddot == rhs.s_ddot &&
    lhs.d == rhs.d &&
    lhs.d_dot == rhs.d_dot &&
    lhs.d_ddot == rhs.d_ddot &&
    lhs.yaw_s == rhs.yaw_s;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::global_planner::FrenetPose_<ContainerAllocator1> & lhs, const ::global_planner::FrenetPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace global_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::global_planner::FrenetPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_planner::FrenetPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::FrenetPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::FrenetPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::FrenetPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::FrenetPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::global_planner::FrenetPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "57d70fe50479087b497ed2a9bcbc0f43";
  }

  static const char* value(const ::global_planner::FrenetPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x57d70fe50479087bULL;
  static const uint64_t static_value2 = 0x497ed2a9bcbc0f43ULL;
};

template<class ContainerAllocator>
struct DataType< ::global_planner::FrenetPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "global_planner/FrenetPose";
  }

  static const char* value(const ::global_planner::FrenetPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::global_planner::FrenetPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 s\n"
"float64 s_dot\n"
"float64 s_ddot\n"
"float64 d\n"
"float64 d_dot\n"
"float64 d_ddot\n"
"float64 yaw_s\n"
;
  }

  static const char* value(const ::global_planner::FrenetPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::global_planner::FrenetPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.s);
      stream.next(m.s_dot);
      stream.next(m.s_ddot);
      stream.next(m.d);
      stream.next(m.d_dot);
      stream.next(m.d_ddot);
      stream.next(m.yaw_s);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct FrenetPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_planner::FrenetPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::global_planner::FrenetPose_<ContainerAllocator>& v)
  {
    s << indent << "s: ";
    Printer<double>::stream(s, indent + "  ", v.s);
    s << indent << "s_dot: ";
    Printer<double>::stream(s, indent + "  ", v.s_dot);
    s << indent << "s_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.s_ddot);
    s << indent << "d: ";
    Printer<double>::stream(s, indent + "  ", v.d);
    s << indent << "d_dot: ";
    Printer<double>::stream(s, indent + "  ", v.d_dot);
    s << indent << "d_ddot: ";
    Printer<double>::stream(s, indent + "  ", v.d_ddot);
    s << indent << "yaw_s: ";
    Printer<double>::stream(s, indent + "  ", v.yaw_s);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOBAL_PLANNER_MESSAGE_FRENETPOSE_H
