// Generated by gencpp from file global_planner/Frenet2WorldServiceRequest.msg
// DO NOT EDIT!


#ifndef GLOBAL_PLANNER_MESSAGE_FRENET2WORLDSERVICEREQUEST_H
#define GLOBAL_PLANNER_MESSAGE_FRENET2WORLDSERVICEREQUEST_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>

#include <global_planner/FrenetPose.h>

namespace global_planner
{
template <class ContainerAllocator>
struct Frenet2WorldServiceRequest_
{
  typedef Frenet2WorldServiceRequest_<ContainerAllocator> Type;

  Frenet2WorldServiceRequest_()
    : frenet_pose()  {
    }
  Frenet2WorldServiceRequest_(const ContainerAllocator& _alloc)
    : frenet_pose(_alloc)  {
  (void)_alloc;
    }



   typedef  ::global_planner::FrenetPose_<ContainerAllocator>  _frenet_pose_type;
  _frenet_pose_type frenet_pose;





  typedef boost::shared_ptr< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> const> ConstPtr;

}; // struct Frenet2WorldServiceRequest_

typedef ::global_planner::Frenet2WorldServiceRequest_<std::allocator<void> > Frenet2WorldServiceRequest;

typedef boost::shared_ptr< ::global_planner::Frenet2WorldServiceRequest > Frenet2WorldServiceRequestPtr;
typedef boost::shared_ptr< ::global_planner::Frenet2WorldServiceRequest const> Frenet2WorldServiceRequestConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator1> & lhs, const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator2> & rhs)
{
  return lhs.frenet_pose == rhs.frenet_pose;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator1> & lhs, const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace global_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "22a20e11335e0f0eaca685a045ac2b3b";
  }

  static const char* value(const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x22a20e11335e0f0eULL;
  static const uint64_t static_value2 = 0xaca685a045ac2b3bULL;
};

template<class ContainerAllocator>
struct DataType< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "global_planner/Frenet2WorldServiceRequest";
  }

  static const char* value(const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
{
  static const char* value()
  {
    return "FrenetPose frenet_pose\n"
"\n"
"================================================================================\n"
"MSG: global_planner/FrenetPose\n"
"float64 s\n"
"float64 s_dot\n"
"float64 s_ddot\n"
"float64 d\n"
"float64 d_dot\n"
"float64 d_ddot\n"
"float64 yaw_s\n"
;
  }

  static const char* value(const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.frenet_pose);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct Frenet2WorldServiceRequest_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::global_planner::Frenet2WorldServiceRequest_<ContainerAllocator>& v)
  {
    s << indent << "frenet_pose: ";
    s << std::endl;
    Printer< ::global_planner::FrenetPose_<ContainerAllocator> >::stream(s, indent + "  ", v.frenet_pose);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOBAL_PLANNER_MESSAGE_FRENET2WORLDSERVICEREQUEST_H
