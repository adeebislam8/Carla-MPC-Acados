// Generated by gencpp from file global_planner/WorldPose.msg
// DO NOT EDIT!


#ifndef GLOBAL_PLANNER_MESSAGE_WORLDPOSE_H
#define GLOBAL_PLANNER_MESSAGE_WORLDPOSE_H


#include <string>
#include <vector>
#include <memory>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace global_planner
{
template <class ContainerAllocator>
struct WorldPose_
{
  typedef WorldPose_<ContainerAllocator> Type;

  WorldPose_()
    : x(0.0)
    , y(0.0)
    , yaw(0.0)
    , v(0.0)
    , acc(0.0)
    , target_v(0.0)  {
    }
  WorldPose_(const ContainerAllocator& _alloc)
    : x(0.0)
    , y(0.0)
    , yaw(0.0)
    , v(0.0)
    , acc(0.0)
    , target_v(0.0)  {
  (void)_alloc;
    }



   typedef double _x_type;
  _x_type x;

   typedef double _y_type;
  _y_type y;

   typedef double _yaw_type;
  _yaw_type yaw;

   typedef double _v_type;
  _v_type v;

   typedef double _acc_type;
  _acc_type acc;

   typedef double _target_v_type;
  _target_v_type target_v;





  typedef boost::shared_ptr< ::global_planner::WorldPose_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::global_planner::WorldPose_<ContainerAllocator> const> ConstPtr;

}; // struct WorldPose_

typedef ::global_planner::WorldPose_<std::allocator<void> > WorldPose;

typedef boost::shared_ptr< ::global_planner::WorldPose > WorldPosePtr;
typedef boost::shared_ptr< ::global_planner::WorldPose const> WorldPoseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::global_planner::WorldPose_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::global_planner::WorldPose_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::global_planner::WorldPose_<ContainerAllocator1> & lhs, const ::global_planner::WorldPose_<ContainerAllocator2> & rhs)
{
  return lhs.x == rhs.x &&
    lhs.y == rhs.y &&
    lhs.yaw == rhs.yaw &&
    lhs.v == rhs.v &&
    lhs.acc == rhs.acc &&
    lhs.target_v == rhs.target_v;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::global_planner::WorldPose_<ContainerAllocator1> & lhs, const ::global_planner::WorldPose_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace global_planner

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsMessage< ::global_planner::WorldPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::global_planner::WorldPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::WorldPose_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::global_planner::WorldPose_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::WorldPose_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::global_planner::WorldPose_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::global_planner::WorldPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "c9f1d062a373ad7af4375be49c38f4d5";
  }

  static const char* value(const ::global_planner::WorldPose_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0xc9f1d062a373ad7aULL;
  static const uint64_t static_value2 = 0xf4375be49c38f4d5ULL;
};

template<class ContainerAllocator>
struct DataType< ::global_planner::WorldPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "global_planner/WorldPose";
  }

  static const char* value(const ::global_planner::WorldPose_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::global_planner::WorldPose_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 x\n"
"float64 y\n"
"float64 yaw\n"
"float64 v\n"
"float64 acc\n"
"float64 target_v\n"
;
  }

  static const char* value(const ::global_planner::WorldPose_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::global_planner::WorldPose_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.x);
      stream.next(m.y);
      stream.next(m.yaw);
      stream.next(m.v);
      stream.next(m.acc);
      stream.next(m.target_v);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct WorldPose_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::global_planner::WorldPose_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::global_planner::WorldPose_<ContainerAllocator>& v)
  {
    s << indent << "x: ";
    Printer<double>::stream(s, indent + "  ", v.x);
    s << indent << "y: ";
    Printer<double>::stream(s, indent + "  ", v.y);
    s << indent << "yaw: ";
    Printer<double>::stream(s, indent + "  ", v.yaw);
    s << indent << "v: ";
    Printer<double>::stream(s, indent + "  ", v.v);
    s << indent << "acc: ";
    Printer<double>::stream(s, indent + "  ", v.acc);
    s << indent << "target_v: ";
    Printer<double>::stream(s, indent + "  ", v.target_v);
  }
};

} // namespace message_operations
} // namespace ros

#endif // GLOBAL_PLANNER_MESSAGE_WORLDPOSE_H
