# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from global_planner/Frenet2WorldServiceRequest.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import global_planner.msg

class Frenet2WorldServiceRequest(genpy.Message):
  _md5sum = "22a20e11335e0f0eaca685a045ac2b3b"
  _type = "global_planner/Frenet2WorldServiceRequest"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """FrenetPose frenet_pose

================================================================================
MSG: global_planner/FrenetPose
float64 s
float64 s_dot
float64 s_ddot
float64 d
float64 d_dot
float64 d_ddot
float64 yaw_s"""
  __slots__ = ['frenet_pose']
  _slot_types = ['global_planner/FrenetPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       frenet_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frenet2WorldServiceRequest, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.frenet_pose is None:
        self.frenet_pose = global_planner.msg.FrenetPose()
    else:
      self.frenet_pose = global_planner.msg.FrenetPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.frenet_pose.s, _x.frenet_pose.s_dot, _x.frenet_pose.s_ddot, _x.frenet_pose.d, _x.frenet_pose.d_dot, _x.frenet_pose.d_ddot, _x.frenet_pose.yaw_s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.frenet_pose is None:
        self.frenet_pose = global_planner.msg.FrenetPose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.frenet_pose.s, _x.frenet_pose.s_dot, _x.frenet_pose.s_ddot, _x.frenet_pose.d, _x.frenet_pose.d_dot, _x.frenet_pose.d_ddot, _x.frenet_pose.yaw_s,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_7d().pack(_x.frenet_pose.s, _x.frenet_pose.s_dot, _x.frenet_pose.s_ddot, _x.frenet_pose.d, _x.frenet_pose.d_dot, _x.frenet_pose.d_ddot, _x.frenet_pose.yaw_s))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.frenet_pose is None:
        self.frenet_pose = global_planner.msg.FrenetPose()
      end = 0
      _x = self
      start = end
      end += 56
      (_x.frenet_pose.s, _x.frenet_pose.s_dot, _x.frenet_pose.s_ddot, _x.frenet_pose.d, _x.frenet_pose.d_dot, _x.frenet_pose.d_ddot, _x.frenet_pose.yaw_s,) = _get_struct_7d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_7d = None
def _get_struct_7d():
    global _struct_7d
    if _struct_7d is None:
        _struct_7d = struct.Struct("<7d")
    return _struct_7d
# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from global_planner/Frenet2WorldServiceResponse.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import global_planner.msg

class Frenet2WorldServiceResponse(genpy.Message):
  _md5sum = "a89febe28dc7b8596bb180ba9404e6a5"
  _type = "global_planner/Frenet2WorldServiceResponse"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """WorldPose world_pose

================================================================================
MSG: global_planner/WorldPose
float64 x
float64 y
float64 yaw
float64 v
float64 acc
float64 target_v"""
  __slots__ = ['world_pose']
  _slot_types = ['global_planner/WorldPose']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       world_pose

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(Frenet2WorldServiceResponse, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.world_pose is None:
        self.world_pose = global_planner.msg.WorldPose()
    else:
      self.world_pose = global_planner.msg.WorldPose()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.world_pose.x, _x.world_pose.y, _x.world_pose.yaw, _x.world_pose.v, _x.world_pose.acc, _x.world_pose.target_v))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.world_pose is None:
        self.world_pose = global_planner.msg.WorldPose()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.world_pose.x, _x.world_pose.y, _x.world_pose.yaw, _x.world_pose.v, _x.world_pose.acc, _x.world_pose.target_v,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_6d().pack(_x.world_pose.x, _x.world_pose.y, _x.world_pose.yaw, _x.world_pose.v, _x.world_pose.acc, _x.world_pose.target_v))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    if python3:
      codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      if self.world_pose is None:
        self.world_pose = global_planner.msg.WorldPose()
      end = 0
      _x = self
      start = end
      end += 48
      (_x.world_pose.x, _x.world_pose.y, _x.world_pose.yaw, _x.world_pose.v, _x.world_pose.acc, _x.world_pose.target_v,) = _get_struct_6d().unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_6d = None
def _get_struct_6d():
    global _struct_6d
    if _struct_6d is None:
        _struct_6d = struct.Struct("<6d")
    return _struct_6d
class Frenet2WorldService(object):
  _type          = 'global_planner/Frenet2WorldService'
  _md5sum = '7c3d04499a34679df3b3eaae1ccad4b8'
  _request_class  = Frenet2WorldServiceRequest
  _response_class = Frenet2WorldServiceResponse
